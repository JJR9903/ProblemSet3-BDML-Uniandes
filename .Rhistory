vec (3:27)
vector (3:27)
vector_1 <- C(1:27)
vector_1 <- C(1:27)
vector_1 <-c(1:27)
seq(1, 27, length.out = 2)
x <- sqrt(2) ^ 2
y <- seq (1,2)
y_1 <- seq (from: 1 to: 2)
y_1 <- seq (from= 1, to= 2)
y_2<- seq (from= 3, to= 3)
y_2<- seq (from= 3, to= 27)
rm y_1
rm (y_1)
y_2<- seq (from= 3, to= 27)(((x%%2)==0))
y_2<- seq (from= 3, to= 27)((x%%2)==0))
q (from= 3, to= 27)((x%%2)==3))
y_2<- seq (from= 3, to= 27)((x%%2)==3))
y_2<- seq (from= 3, to= 27 ifelse(num %% 2 == 0))
y_1<- seq (from= 3, to= 27 ifelse(num %% 2 == 0))
y_1<- ifelse(num %% 2 == 0))
ifelse(num %% 2 == 0)
num <- 1:8 ifelse(num %% 2 == 0)
num <- (1:8) ifelse(num %% 2 == 0)
vector-a<-c(3:27)
b<-((a%%2)==0)
vector_a<-c(3:27)
s<-((a%
pares<-((a%%2)==0)
pares<-((vector_a%%2)==0)
matrix(1:4, nrow = 2, ncol = 2)
letras<-letters[1:4]
rm (letras)
letras<-letters[1:27]
lista<- list("un_vector= letras", "una_matrix= matrix")
vector_a<-c(3:27)
pares<-((vector_a%%2)==0)
matrix(1:4, nrow = 2, ncol = 2)
letras<-letters[1:27]
lista<- list("un_vector= letras", "una_matrix= matrix")
no es una cadena de texto’//
funciona <-funcion ( )
texto <- funcion (x){separarp<-(substring(x, 1:nchar(x), 1:nchar(x)}
texto <- funcion (x) {separarp<-(substring(x, 1:nchar(x), 1:nchar(x)}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
texto <- funcion (x) {if separarp<-(substring(x, 1:nchar(x), 1:nchar(x)}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
return(primera_letra)
return(primera_letra(sol))
return(primera_letra(argumento1 = ))
texto <- funcion (economia) {if separarp<-(substring(economia, 1:nchar(economia), 1:nchar(economia)}
texto <- function (economia) {if separarp<-(substring(economia, 1:nchar(economia), 1:nchar(economia)}
texto <- function (economia) {if separarp<-(substring(economia, 1:nchar(economia), 1:nchar(economia)}
texto <- function (economia) {separarp<-(substring(economia, 1:nchar(economia), 1:nchar(economia)}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
texto <- function (economia) {separarl<-(substring(economia, 1:nchar(economia), 1:nchar(economia)}
for (i in "economia") {
if(i %in% vowels){
print(paste("es una vocal y es la", i, sep = " "))
vector_vowels <- c(vector_vowels, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
}
for (i in "economia") {
if(i %in% vocaless){
print(paste("es una vocal y es la", i, sep = " "))
vector_vowels <- c(vector_vowels, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
}
if(i %in% vocales){
print(paste("es una vocal y es la", i, sep = " "))
vector_vowels <- c(vector_vowels, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
if(i %in% "economia"){
print(paste("es una vocal y es la", i, sep = " "))
vector_vowels <- c(vector_vowels, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
vector_vocales <- c(vocales, i)
vector_vocales <- c(vocales, i)
vocales <- c()
vector_vocales <- c(vocales, i)
}
for (i in "vocales") {
if(i %in% "economia"
vector_vocales <- c(vocales, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
}
}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
if(i %in% "economia"
View(primera_letra)
print(vector_vocales)
if(i %in% "vocales"
vector_vocales <- c(vocales, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
}
}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
for (i in "vocales") {
if(i %in% "vocales"
vector_vocales <- c(vocales, i)
} else{
print(paste("no es una vocal, es la letra", i, sep = " "))
}
}
}
primera_letra<-function(argumento1, argumento2){
if (!is.character(argumento1) | !is.character(argumento2)) {
stop("Al menos uno de los argumentos no es una línea de texto")
}
palabra.1<-tolower(argumento1)
palabra.1<-trimws(x = palabra.1, which = c("both"))
letra.1<-substr(x = palabra.1, start = 1, stop = 1)
palabra.2<-tolower(argumento2)
palabra.2<-trimws(x = palabra.2, which = c("both"))
letra.2<-substr(x = palabra.2, start = 1, stop = 1)
if (palabra.1==palabra.2) {
warning("Las dos palabras son iguales", call. = F)
}
if (letra.1==letra.2){
cat("Las palabras", palabra.1, "y", palabra.2,
"empiezan con la misma letra",
sep = " ")
} else {
cat("Las palabras", palabra.1, "y", palabra.2,
"no empiezan con la misma letra",
sep = " ")
}
}
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
vocales <- c()
texto <- function (economia) {separarl<-(substring(economia, 1:nchar(economia), 1:nchar(economia)
vocales <- c()
}
}
}
}
}
q()
install.packages("dplyr")
anti_corr<-read.csv("anti_corr.csv", stringsAsFactors = F,
encoding = "UTF-8")
anti_corr<-read.csv("anti_corr.csv", stringsAsFactors = F,
encoding = "UTF-8")
head(anti_corr)
("anti_corr.csv", stringsAsFactors = F,
encoding = "UTF-8")
head(anti_corr)
$
Rendimiento.t.ha.)
(
"prod_pina_yuca.csv"
,
encoding =
"UTF-8"
,
stringsAsFactors =
F,
sep =
","
,
dec =
","
)
lista<- list("un_vector= letras", "una_matrix= matrix")
matrix(1:4, nrow = 2, ncol = 2)
c(1, 2, 4, 7)
c(1, 2, 4, 7)
vector_1 <-c(1:27)
vector_11 <-c
seq (2,1,27)
seq(1, 27, length.out = 2)
clc (vector_1)
x <- sqrt(2) ^ 2
y_2<- seq (from= 3, to= 27)
rm (y_1)
y_1<- ifelse(num %% 2 == 0))
num <- (1:8) ifelse(num %% 2 == 0+2)
vector_a<-c(3:27)
pares<-((vector_a%%2)==0)
matrix(1:4, nrow = 2, ncol = 2)
letras<-letters[1:27]
lista<- list("un_vector= letras", "una_matrix= matrix")
5%%%
vector_1 <- C(1:27)
1+1
plot(c(11))
plot(c(1,1))
median(123)
mean (c(1,2,3))
airquality
load("C:/Users/PC-PORTATIL/Downloads/bike.RData")
## clean environment
rm(list = ls())
equire(pacman)
m(list = ls())
source("~/.active-rstudio-document")
# Other tools of visualization of the results
browseURL("https://cran.r-project.org/web/packages/jtools/vignettes/summ.html")
orangeec <- read.csv("C:/Users/PC-PORTATIL/Downloads/orangeec.csv", header=FALSE)
View(orangeec)
an)
require(pacman)
## p_load llama/instala-llama las librerías que se enlistan:
p_load(tidyverse, # contiene las librerías ggplot, dplyr...
rvest) # web-scraping
html <-
'<!DOCTYPE html>
<html>
<meta charset="utf-8">
<head>
<title> Título de la página: ejemplo de clase </title>
</head>
<body>
<h1> Title 1.</h1>
<h2> Subtitle <u>subrayado-1</u>. </h2>
<p> Este es un párrafo muy pequeño que se encuentra dentro de la etiqueta <b>p</b> de <i>html</i> </p>
</body>
</html>'
#EXPORRTAR Y LEER
write.table(x=my_html , file='my_page.html' , quote=F , col.names=F , row.names=F)
y_html <-
'<!DOCTYPE html>
<html>
<meta charset="utf-8">
<head>
<title> Título de la página: ejemplo de clase </title>
</head>
<body>
<h1> Title 1.</h1>
<h2> Subtitle <u>subrayado-1</u>. </h2>
<p> Este es un párrafo muy pequeño que se encuentra dentro de la etiqueta <b>p</b> de <i>html</i> </p>
</body>
</html>'
write.table(x=my_html , file='my_page.html' , quote=F , col.names=F , row.names=F)
my_html <-
'<!DOCTYPE html>
<html>
<meta charset="utf-8">
<head>
<title> Título de la página: ejemplo de clase </title>
</head>
<body>
<h1> Title 1.</h1>
<h2> Subtitle <u>subrayado-1</u>. </h2>
<p> Este es un párrafo muy pequeño que se encuentra dentro de la etiqueta <b>p</b> de <i>html</i> </p>
</body>
</html>'
write.table(x=my_html , file='my_page.html' , quote=F , col.names=F , row.names=F)
browseURL("my_page.html") ## leer con el navegador de su equipo
vignette("rvest")
Copiar el url
#Copiar el url
my_url = "https://es.wikipedia.org/wiki/Copa_Mundial_de_F%C3%BAtbol"
#voy a la
browseURL(my_url) ## Ir a la página
#Le digo que le lea todo lo de la pg
my_html = read_html(my_url) ## leer el html de la página
#Ver la clase del objeto
class(my_html) ## ver la clase del objeto
#mostrar
View(my_html)
# Aca le estoy diciendo que me lo guade en un elemento del nombre my_html y que saque el elemento h2 que son los encabezados
my_html %>% html_elements("h2")
source("C:/Users/PC-PORTATIL/Dropbox/R/Introducción a R.R")
rm(list=ls())
dir_set()
####Unión de las bases
require("here")
require("tidyverse")
pacman:: p_load(rvest, tidyverse, skimr, stargazer,cowplot,car,boot,caret, here)
pacman:: p_load(rvest, tidyverse, skimr, stargazer,cowplot,car,boot,caret, here,tidyverse)
require("here")
train_hogares <- read.table("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/train_hogares.Rds", header=TRUE, quote="\"")
View(train_hogares)
train_personas <- read.table("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/train_personas.Rds", header=TRUE, quote="\"")
View(train_personas)
colnames (train_hogares)
train_hogares <- readRDS("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/train_hogares.Rds"))
train_hogares <- readRDS("/data/train_hogares.Rds"))
train_hogares <- readRDS(here("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/train_hogares.Rds"))
train_personas <- readRDS(here("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/train_personas.Rds"))
colnames (train_hogares)
colnames (train_hogares)[1:2 ]
colnames (train_personas)[1:2 ]
train_hogares<- left_join(train_personas)
sum_ingresos<-train_personas %>% group_by(id) %>% summarize(Ingtot_hogar=sum(Ingtot,na.rm = TRUE))
summary(sum_ingresos)
train_hogares<- left_join(train_personas, sum_ingresos)
colnames(train_hogares)
test_hogares <- readRDS(here("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/test_hogares.Rds"))
test_personas <- readRDS(here("~/GitHub/Problem-set2-BigData-ML-Uniandes/data/test_personas.Rds"))
colnames (test_personas)[1:2]
sum_ingresos<-test_personas %>% group_by(id) %>% summarize(Ingtot_hogar=sum(Ingtot,na.rm = TRUE))
sum_ingresos_test<-test_personas %>% group_by(id) %>% summarize(Ingtot_hogar=sum(Ingtot,na.rm = TRUE))
sum_ingresos_test<-test_personas %>% group_by(id) %>% summarize(Ingtotob_hogar=sum(Ingtotob,na.rm = TRUE))
colum(test_personas)
column_to_rownames(test_personas)
colnames (test_personas)
sum_ingresos_test<-test_personas %>% group_by(id) %>% summarize(P7472=sum(P7472,na.rm = TRUE))
summary(sum_ingresos_test)
test_hogares<- left_join(train_personas, sum_ingresos_test)
## get Bogota-UPZ
bog <- opq(bbox = getbb("Bogota Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
## get Bogota-UPZ
bog <- opq(bbox = getbb("Bogota Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
bog <- bog$osm_multipolygons %>% subset(admin_level==9)
## basic plot
ggplot() + geom_sf(data=bog)
rm(list=ls())
dir_set <- function(){
if(Sys.info()["user"]=="JuanJose"){
setwd("/Users/JuanJose/Library/CloudStorage/OneDrive-UniversidaddelosAndes/Uniandes/9 Semestre - 1 PEG/Big Data/Problems Set/ProblemSet3-BDML-Uniandes")
}
else if(Sys.info()["user"]=="PC-PORTATIL"){
setwd("C:/Users/PC-PORTATIL/OneDrive/Documentos/GitHub/ProblemSet3-BDML-Uniandes")
}
else{
setwd("C:/Users/ja.ospinap/Downloads/ProblemSet3-BDML-Uniandes")
}
}
dir_set()
library(pacman)
p_load(rstudioapi, tidyverse, sf, rio, osmdata,leaflet, skimr)
path<- dirname(getActiveDocumentContext()$path)
setwd(path)
dir()
house <- import("stores/dataPS3/train.rds")
house <- st_as_sf(x = house, ## datos
coords=c("lon","lat"), ## coordenadas
crs=4326) ## CRS
st_geometry(house)
##Descriptivas
class(house)
#####Lista de items
#####Con amenity
list <-available_tags("amenity") %>%
head(1000)
city<- ("Bogotá")
zone<- c("bank", "university", "restaurant","veterinary", "pub", "marketplace", "hospital", "clinic", "pharmacy", "prison", "bar", "cafe", "college","nightclub","school","library","bus_station","kindergarten","waste_disposal")
base<-data.frame()
for (i in 1:length(zone)){
al <- opq (paste0(city," Colombia"))%>%
add_osm_feature (
key = "amenity",
value = zone[i])
osm_al= al%>%
osmdata_sf()
osm_al2<-osm_al$osm_points%>%
select(osm_id,amenity)
assign(paste0("osm_al_",zone[i]),osm_al2)
}
## get Bogota-UPZ
bog <- opq(bbox = getbb("Bogota Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
View(osm_al_college)
prueba <-osm_al_college[bog,]
bog <- bog$osm_multipolygons %>% subset(admin_level==9)
prueba <-osm_al_college[bog,]
View(prueba)
prueba <- st_intersection(x =osm_al_college  , y = bog)
View(osm_al_bar)
View(bog)
assign(paste0("barrio_bog",zone[i]), st_intersection(x =assign("osm_al_college",zone[i])  , y = bog))
assign(paste0("barrio_bog",zone[i]), st_intersection(x =assign("osm_al_",zone[i])  , y = bog))
class(assign("osm_al_",zone[1]))
(assign("osm_al_",zone[1]))
assign(paste0("osm_al_",zone[i]))
assign(paste0("osm_al_",zone[1]))
assign(paste0("osm_al_",zone[1]))
paste0("osm_al_",zone[1])
assign(paste0("barrio_bog",zone[i]), st_intersection(x =paste0("osm_al_",zone[1])  , y = bog))
class(paste0("osm_al_",zone[1])
class(paste0("osm_al_",zone[1])
(paste0("osm_al_",zone[1])
assign(paste0("osm_al_",zone[1]))
length(zone)
saveRDS(bog,file=paste0(getwd(),"/stores/bog.rds"))
####### Poner barrios a la base
osm_al_bank <- st_intersection(x = osm_al_bank , y = Bogotá)
####### Poner barrios a la base
osm_al_bank <- st_intersection(x = osm_al_bank , y = bog)
####### Poner barrios a la base
osm_al_bank <- st_intersection(x = osm_al_bank , y = bog)
osm_al_cafe <- st_intersection(x = osm_al_cafe , y = bog)
source("~/GitHub/ProblemSet3-BDML-Uniandes/datos espaciales mejor.R")
